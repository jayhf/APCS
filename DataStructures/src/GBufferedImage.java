import java.awt.Color;import java.awt.Font;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.Image;import java.awt.image.BufferedImage;import java.lang.reflect.Method;import acm.graphics.GObject;import acm.graphics.GRectangle;/** * @version 1.0 * @author Jay Fleischer */@SuppressWarnings("serial")public class GBufferedImage extends GObject {	public interface Paintable {		public void paint(Graphics2D g);	}		private Graphics2D g;	private BufferedImage img;	private BufferedImage img2;	private int width, height;		public GBufferedImage(int width, int height) {		super();		img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);		img2 = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);		g = img2.createGraphics();		this.width = width;		this.height = height;	}		public void callPaint(Object obj, Method m) {		try {			m.invoke(obj, g);			BufferedImage temp = img;			img = img2;			img2 = temp;			g = img2.createGraphics();			g.setColor(Color.BLACK);			g.fillRect(0, 0, width, height);		} catch (Exception e) {			e.printStackTrace();		}	}		public void callPaint(final Object obj, final Method m, boolean returnImmediately) {		if (returnImmediately)			new Thread() {				@Override				public void run() {					callPaint(obj, m);				}			};		else			callPaint(obj, m);	}		public void callPaint(Paintable p) {		try {			p.paint(g);			BufferedImage temp = img;			img = img2;			img2 = temp;			g = img2.createGraphics();			g.setColor(Color.BLACK);			g.fillRect(0, 0, width, height);		} catch (Exception e) {			e.printStackTrace();		}	}		public void callPaint(final Paintable p, boolean returnImmediately) {		if (returnImmediately)			new Thread() {				@Override				public void run() {					callPaint(p);				}			};		else			callPaint(p);	}		public void done() {		BufferedImage temp = img;		img = img2;		img2 = temp;		g = img2.createGraphics();		g.setColor(Color.BLACK);		g.fillRect(0, 0, width, height);	}		public void done(boolean clear) {		BufferedImage temp = img;		img = img2;		img2 = temp;		g = img2.createGraphics();		g.setColor(Color.BLACK);		if (clear)			g.fillRect(0, 0, width, height);	}		public void drawImage(int x, int y, Image img) {		g.drawImage(img, x, y, null);	}		public void drawImage(int x, int y, int width, int height, Image img) {		g.drawImage(img, x, y, width, height, null);	}		public void drawLine(int x1, int y1, int x2, int y2, Color c) {		g.setColor(c);		g.drawLine(x1, y1, x2, y2);	}		public void drawOval(int x, int y, int width, int height, Color c) {		g.setColor(c);		g.fillOval(x, y, width, height);	}		public void drawOval(int x, int y, int width, int height, Color c, boolean filled) {		g.setColor(c);		if (filled)			g.fillOval(x, y, width, height);		else			g.drawOval(x, y, width, height);	}		public void drawPixel(int x, int y, Color c) {		g.setColor(c);		g.fillRect(x, y, 1, 1);	}		public void drawRectangle(int x, int y, int width, int height, Color c) {		g.setColor(c);		g.fillRect(x, y, width, height);	}		public void drawRectangle(int x, int y, int width, int height, Color c, boolean filled) {		g.setColor(c);		if (filled)			g.fillRect(x, y, width, height);		else			g.drawRect(x, y, width, height);	}		public void drawText(int x, int y, String text, Font f) {		g.setFont(f);		g.drawString(text, x, y);	}		@Override	public GRectangle getBounds() {		return new GRectangle(0, 0, width, height);	}		@Deprecated	public Graphics2D getGraphics() {		return g;	}		@Override	public void paint(Graphics g) {		synchronized (this.g) {			g.drawImage(img, 0, 0, null);		}	}}