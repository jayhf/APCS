import java.awt.Color;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.RenderingHints;import java.awt.image.BufferedImage;import acm.graphics.GObject;import acm.graphics.GRectangle;/** * @version 1.0 * @author Jay Fleischer */@SuppressWarnings("serial")public class GBufferedImage extends GObject {	private class DrawThread extends Thread {		private Paintable p;		private long waitTime;				public DrawThread(long millis, Paintable p) {			setDaemon(true);			waitTime = millis;			this.p = p;		}				@Override		public void run() {			while (!isInterrupted())				try {					sleep(waitTime);					p.paint(g);					BufferedImage temp = img;					img = img2;					img2 = temp;					g = img2.createGraphics();					g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);					g.setColor(Color.BLACK);					g.fillRect(0, 0, width, height);					repaint();				} catch (Exception e) {					e.printStackTrace();					break;				}		}	}		public interface Paintable {		public void paint(Graphics2D g);	}		private DrawThread drawThread;	private Graphics2D g;		private BufferedImage img, img2;		private int width, height;		public GBufferedImage(int width, int height) {		super();		img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);		img2 = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);		g = img2.createGraphics();		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);		this.width = width;		this.height = height;	}		@Override	public GRectangle getBounds() {		return new GRectangle(0, 0, width, height);	}		@Override	public void paint(Graphics g) {		synchronized (this.g) {			g.drawImage(img, 0, 0, null);		}	}		public void startDrawLoop(Paintable p) {		if (drawThread != null)			drawThread.interrupt();		drawThread = new DrawThread(20, p);		drawThread.start();	}		public void stopDrawLoop() {		if (drawThread != null)			drawThread.interrupt();	}}