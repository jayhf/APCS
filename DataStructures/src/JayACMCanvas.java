import java.awt.Color;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.Rectangle;import java.awt.RenderingHints;import java.awt.image.BufferedImage;import acm.graphics.GCanvas;/** * A slightly modified version of my CS2 canvas that gives me more control over how things are displayed on the screen * than ACM normally allows. *  * @author Jay Fleischer * @version 1.0 (1-20-14) */@SuppressWarnings("serial")public class JayACMCanvas extends GCanvas {	private class DrawThread extends Thread {		private Paintable p;		// private double spinTime = 0;		private long waitTime;		public DrawThread(long millis, Paintable p) {			setDaemon(true);			waitTime = millis;			this.p = p;		}		@Override		public void run() {			while (!isInterrupted())				try {					sleep(waitTime);					p.paint(g);					g.dispose();					BufferedImage temp = img;					img = img2;					img2 = temp;					g = img2.createGraphics();					g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);					g.setColor(Color.BLACK);					g.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);					// g.rotate(spinTime += .001, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2); <-- Everything used to spin...					repaint();				} catch (Exception e) {					e.printStackTrace();					break;				}		}	}	/**	 * An interface for classes that can be painted on my canvas	 * 	 * @author Jay	 * 	 */	public interface Paintable {		public void paint(Graphics2D g);	}	public static final int SCREEN_WIDTH = 900, SCREEN_HEIGHT = 900;	private DrawThread drawThread;	private Graphics2D g;	private BufferedImage img, img2;	/**	 * Creates an instance of my canvas	 */	public JayACMCanvas() {		super();		img = new BufferedImage(SCREEN_WIDTH, SCREEN_HEIGHT, BufferedImage.TYPE_INT_ARGB);		img2 = new BufferedImage(SCREEN_WIDTH, SCREEN_HEIGHT, BufferedImage.TYPE_INT_ARGB);		g = img2.createGraphics();		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);	}	@Override	public Rectangle getBounds() {		return new Rectangle(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);	}	/**	 * Paints the canvas to the screen	 */	@Override	public void paint(Graphics g) {		synchronized (this.g) {			g.drawImage(img, 0, 0, null);		}	}	/**	 * Starts a thread that draws that passed Paintable every tick	 * 	 * @param p	 *            - the Paintable to paint	 * @param delay	 *            - the amount to wait between repaints	 */	public void startDrawLoop(Paintable p, int delay) {		if (drawThread != null)			drawThread.interrupt();		drawThread = new DrawThread(delay, p);		drawThread.start();	}	public void stopDrawLoop() {		if (drawThread != null)			drawThread.interrupt();	}}